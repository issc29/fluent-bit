name: poolside Agent

on:
  issues:
    types: [labeled]
  workflow_dispatch:

env:
  API_URL:  ${{ vars.API_URL || 'https://api.poolsi.de' }}
  AGENT_NAME: ${{ vars.AGENT_NAME || 'vanilla_agent_1003' }}
  POOL_VERSION: ${{ vars.POOL_VERSION || 'v0.2.98' }}
  BASE_BRANCH: master

jobs:
  poolside-agent:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.labels.*.name, 'poolside-agent')
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Pool
        id: setup-pool
        uses: ./.github/actions/setup-pool
        with:
          tag: ${{ env.POOL_VERSION }}
          github-token: ${{ secrets.FORGE_POOL_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create branches
        id: branch
        run: |
          # Create or checkout base branch from tag
          if git show-ref --verify --quiet refs/remotes/origin/${{ env.BASE_BRANCH }}; then
            echo "Base branch ${{ env.BASE_BRANCH }} already exists, checking it out"
            git checkout ${{ env.BASE_BRANCH }}
            git pull origin ${{ env.BASE_BRANCH }}
          else
            echo "Creating new base branch ${{ env.BASE_BRANCH }} from tag"
            git checkout -b ${{ env.BASE_BRANCH }}
            git push origin ${{ env.BASE_BRANCH }}
          fi

          # Create feature branch with issue number
          BRANCH_NAME="docs"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b "$BRANCH_NAME"
          echo "Working with base branch: ${{ env.BASE_BRANCH }} and feature branch: $BRANCH_NAME"

      - name: Get issue details
        id: issue
        run: |
          ISSUE_BODY=$(cat <<'EOF'
          ${{ github.event.issue.body }}
          EOF
          )
          echo "issue_body<<EOF" >> $GITHUB_OUTPUT
          echo "$ISSUE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Implement changes with Pool Agent
        env:
          POOLSIDE_API_KEY: ${{ secrets.POOLSIDE_API_KEY }}
        run: |
          echo "You are an LLM agent tasked with documenting every file in a repository. Your goal is to generate comprehensive documentation for each file, explaining its purpose, functionality, and usage.  For each file in the repository, you should: 1. Analyze the file's content and structure 2. Identify the main components, functions, or classes 3. Explain the purpose and functionality of each component 4. Document any important parameters, return values, or side effects 5. Provide usage examples where applicable 6. Note any dependencies or requirements. Please generate documentation for each file in the following format: - File path: [path/to/file] - File type: [e.g., Python script, configuration file, etc.] - Purpose: [Brief description of what the file does] - Key components: [List of main functions, classes, or sections] - Detailed documentation: [Comprehensive explanation of the file's functionality] - Usage examples: [Code examples showing how to use the file/components] - Dependencies: [List of any external libraries or files this file depends on]  Start documenting the files in the repository. Make sure to write the documentation files in markdown .md files in the repo. for every 2 files created make sure to do a git commit and git push so that we save the progress"

          pool --api-url "${{ env.API_URL }}" \
            --agent-name "${{ env.AGENT_NAME }}" \
            --prompt "Implement the changes requested in the following issue. After implementing the changes, create a file named 'pr-summary.md' in the repository root that contains a concise pull request summary with: 1) A brief overview of what was implemented, 2) Key changes as bullet points, 3) Any relevant notes about the implementation. Keep the summary under 300 words." \
            --context-file /tmp/issue-description.txt \
            --unsafe-auto-allow 


      - name: Verify PR summary exists
        if: steps.changes.outputs.has_changes == 'true'
        id: pr-summary
        run: |
          if [ -f "pr-summary.md" ]; then
            echo "✅ PR summary found"
            cat pr-summary.md
          else
            echo "⚠️  No pr-summary.md file found, using default summary"
            echo "Implemented changes for issue #${{ github.event.issue.number }}" > pr-summary.md
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Read the generated summary
          PR_BODY=$(cat pr-summary.md)

          # Create the PR
          gh pr create \
            --title "poolside-agent implemented #${{ github.event.issue.number }}" \
            --body "$PR_BODY" \
            --base ${{ env.BASE_BRANCH }} \
            --head ${{ steps.branch.outputs.branch_name }} \
            --label "made-by-poolside"

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ Successfully implemented changes and created PR from branch: ${{ steps.branch.outputs.branch_name }}"
          else
            echo "ℹ️  No changes were made by the agent"
          fi
